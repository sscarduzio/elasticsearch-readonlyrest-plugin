/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */
buildscript {
    ext {
        esVersion = project.properties['esVersion'] ?: "unknown"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath group: 'org.owasp',                                    name: 'dependency-check-gradle',  version: '6.5.3'
        classpath group: 'com.star-zero.gradle',                         name: 'githook',                  version: '1.2.1'
        classpath group: 'gradle.plugin.com.github.maiflai',             name: 'gradle-scalatest',         version: '0.24'
        classpath group: 'gradle.plugin.com.hierynomus.gradle.plugins',  name: 'license-gradle-plugin',    version: '0.15.0'
        classpath group: 'com.github.jengelman.gradle.plugins',          name: 'shadow',                   version: '4.0.4'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url 'https://jitpack.io' }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: "com.github.hierynomus.license"
apply plugin: "com.star-zero.gradle.githook"
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'org.owasp.dependencycheck'

dependencyCheck {
    /*
       Severity	Base Score
       None     0
       Low      0.1-3.9
       Medium   4.0-6.9
       High     7.0-8.9
       Critical 9.0-10.0
     */
    failBuildOnCVSS = 3
    scanConfigurations = ['runtime']
    suppressionFiles = ["${project.rootDir}/supressions_cve.xml"]
}

compileScala {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events "standardOut", "started", "passed", "skipped", "failed"
    }
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

configurations {
    shadowCompile
    compile.extendsFrom(shadowCompile)
}

dependencies {
    shadowCompile group: 'org.ow2.asm',                   name: 'asm',                              version: '9.3'
    shadowCompile group: 'io.kevinlee',                   name: 'just-semver_2.12',                 version: '0.5.0'
    shadowCompile group: 'com.lihaoyi',                   name: 'os-lib_2.12',                      version: '0.8.1'
    shadowCompile group: 'org.scala-lang',                name: 'scala-library',                    version: '2.12.8'
}

license {
    header rootProject.file('ReadonlyRESTLicenseHeader.txt')
    skipExistingHeaders true
    useDefaultMappings = false
    mapping {
        java = 'SLASHSTAR_STYLE'
        scala = 'SLASHSTAR_STYLE'
    }
}

githook {
    hooks {
        "pre-commit" {
            shell = "./gradlew license --rerun-tasks"
        }
    }
}

compileScala {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << "-Ywarn-macros:after"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Ypartial-unification", "-Ywarn-macros:after", "-feature", "-Xfatal-warnings"]
}

shadowJar {
    configurations = [project.configurations.shadowCompile]
}

// Configure Auto Relocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "tech.beshu.ror.tools"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}


