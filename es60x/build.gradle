/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

buildscript {
    ext {
        publishedPluginVersion = rootProject.properties['pluginVersion']
        pluginVersion = rootProject.properties['pluginVersion']
        esVersion = project.properties['esVersion']
        pluginName = rootProject.properties['pluginName']
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0"
    }
}

repositories {
    mavenCentral()
}

group = 'org.elasticsearch.plugin'
version = pluginVersion + '_es' + esVersion
def pluginFullName = pluginName + '-' + version

apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: "com.github.hierynomus.license"
apply plugin: "com.gorylenko.gradle-git-properties"

compileScala {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    compile project(path: ':core')

    compile 'org.apache.logging.log4j:log4j-core:2.11.0'

    compile 'org.elasticsearch:elasticsearch:' + esVersion
    compile 'org.elasticsearch.plugin:transport-netty4-client:' + esVersion
}

gitProperties {
    gitPropertiesName "ror-build-info.properties"
    customProperty 'es_version', esVersion
    customProperty 'plugin_version', pluginVersion
}

license {
    header rootProject.file('ReadonlyRESTLicenseHeader.txt')
    skipExistingHeaders true
    useDefaultMappings = false
    mapping {
        java = 'SLASHSTAR_STYLE'
        scala = 'SLASHSTAR_STYLE'
    }
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum file: it.archivePath, algorithm: 'sha1'
    }
}

configurations {
    wagon
    distJars {
        extendsFrom runtime
        exclude group: 'org.elasticsearch'
        exclude group: 'lucene-core'
        exclude module: 'log4j-api'
        exclude module: 'log4j-core'
        exclude group: 'lucene-analyzers-common'
        exclude group: 'org.apache.commons'
        exclude group: 'org.yaml'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }
}

task cleanOldData {
    doLast {
        delete 'build/tmp/' + pluginFullName
    }
}

task jarHellCheck(type: JavaExec) {
    outputs.upToDateWhen { false }
    main = "org.elasticsearch.bootstrap.JarHell"
    classpath = project.sourceSets.main.compileClasspath.filter { it.exists() }
}

task configureEsVersion() {
    doLast {
        if (project.hasProperty('esVersion')) {
            esVersion = project.properties['esVersion']
        }
    }
}

task resolvePluginDescriptorTemplate(type: Copy, dependsOn: configureEsVersion) {
    outputs.upToDateWhen { false }
    from '../plugin-metadata'
    into 'build/tmp/' + pluginFullName
    expand([
            'descriptor': [
                    'name'         : pluginName,
                    'pluginVersion': project.properties['pluginVersion'],
                    'esVersion'    : project.properties['esVersion']
            ]
    ])
}

task ror(type: Zip, dependsOn: [cleanOldData, jarHellCheck, generateGitProperties, jar, resolvePluginDescriptorTemplate]) {
    outputs.upToDateWhen { false }
    archivesBaseName = pluginName
    into('elasticsearch') {
        from configurations.distJars.filter { x -> !x.name.contains('spatial4j') && ! x.name.contains('jts')}
        from 'build/libs/' + pluginFullName + '.jar'
        from 'build/tmp/' + pluginFullName
    }
}
