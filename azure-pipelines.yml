# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  ssh_file: '~/.ssh/gh_deploy_key.priv'

trigger:
  batch: false
  branches:
    include:
    - master
    - develop
    - '*/pull/*'
  tags:
    exclude:
    - '*'
  paths:
    include:
    - '*' 
    exclude:
    - 'docs/*'
    - '*.md'
    - '*/*/*.md'
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Prepration
  jobs:
  - job: "Link_secret_files"
    steps:
    - task: DownloadSecureFile@1
      name: secret
      displayName: 'Download secret.pgp secret file'
      inputs:
        secureFile: 'secret.pgp'

    - script: |
        echo Installing $(secret.secureFilePath) to directory...
        sudo chown root:root $(secret.secureFilePath)
        sudo chmod a+r $(secret.secureFilePath)
        sudo ln -s -t .travis/ $(secret.secureFilePath)
        echo "secret.pgp MD5SUSM `md5sum .travis/secret.pgp`"

    - task: DownloadSecureFile@1
      name: deployKey
      displayName: 'Download secret.pgp secret file'
      inputs:
        secureFile: 'gh_deploy_key.priv'

    - script: |
        echo Installing $(deployKey.secureFilePath) to directory...
        sudo chown root:root $(deployKey.secureFilePath)
        sudo chmod a+r $(deployKey.secureFilePath)
        mkdir -p ~/.ssh
        chmod 0700 ~/.ssh
        sudo ln -s -t ~/.ssh/ $(deployKey.secureFilePath)
        echo " $(ssh_file) MD5SUSM `md5sum $(ssh_file)`"
        sudo chmod 600 $(ssh_file) && sudo printf "%s\n" \
         "Host github.com" \
         "  IdentityFile $(ssh_file)" \
         "  LogLevel ERROR" >> ~/.ssh/config
        ls -ltra .ssh
        # export 

- stage: "test_matrix"
  jobs:
  - job: Test
    steps:
    - script: |
        echo "executing ROR_TASK = $ROR_TASK"
        ci/ci-deploy.sh

    strategy:
      maxParallel: 10
      matrix: 
        LICENSE:
          ROR_TASK: license
        CVE:
          ROR_TASK: cve_check
        UNIT:
          ROR_TASK: unit
        INTEGRATION_PROXY:
          ROR_TASK: integration_proxy
        INTEGRATION_es79x:
          ROR_TASK: integration_es79x
        INTEGRATION_es78x:
          ROR_TASK: integration_es78x
        INTEGRATION_es77x:
          ROR_TASK: integration_es77x
        INTEGRATION_es74x:
          ROR_TASK: integration_es74x
        INTEGRATION_es73x:
          ROR_TASK: integration_es73x
        INTEGRATION_es72x:
          ROR_TASK: integration_es72x
        INTEGRATION_es70x:
          ROR_TASK: integration_es70x

      
