/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

buildscript {
    ext {
        publishedPluginVersion = project.properties['pluginVersion']
        pluginVersion = project.properties['pluginVersion']
        esVersion = project.properties['esVersion']
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.elasticsearch.gradle:build-tools:' + esVersion
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}

group = 'org.elasticsearch.plugin'
version = pluginVersion + '_es' + esVersion

apply plugin: 'java'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'license'

repositories {
    mavenCentral()
    maven { url 'http://repo.gradle.org/gradle/libs-releases-local' }
}

esplugin {
    name project.properties['pluginName']
    description 'Safely expose Elasticsearch REST API'
    classname 'org.elasticsearch.plugin.readonlyrest.wiring.ReadonlyRestPlugin'
}

license {
    header rootProject.file('ReadonlyRESTLicenseHeader.txt')
    skipExistingHeaders true
    useDefaultMappings = false
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

task customJarHellCheck(type: JavaExec) {
    main = "org.elasticsearch.bootstrap.JarHell"
    classpath = project.sourceSets.main.runtimeClasspath.filter { it.exists() }
}
test {
    dependsOn customJarHellCheck
    systemProperty "project.dir", rootProject.projectDir
}

configurations.all {
    resolutionStrategy {
        force "commons-logging:commons-logging:1.1.3"
        force "junit:junit:4.12"
        force "org.slf4j:slf4j-api:1.7.21"
        force "commons-io:commons-io:2.5"
    }
}

dependencies {
    compile 'com.google.guava:guava:21.0'
    compile 'org.elasticsearch.plugin:transport-netty4-client:' + esVersion
    compile 'com.unboundid:unboundid-ldapsdk:3.2.0'
    compile 'org.elasticsearch.client:rest:' + esVersion
    compile 'com.jayway.jsonpath:json-path:2.2.0'
    compile 'net.minidev:json-smart:2.3'
    compile 'net.minidev:accessors-smart:1.2'
    compile 'org.slf4j:slf4j-api:1.7.25'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'junit:junit:4.12'
    testCompile 'org.gradle:gradle-tooling-api:2.13'
    testRuntime 'org.gradle:gradle-tooling-api:2.13'
    testCompile('org.testcontainers:testcontainers:1.1.9')
    testRuntime('org.testcontainers:testcontainers:1.1.9')
}

run {
    systemProperty "java.security.policy", "src/main/plugin-metadata/plugin-security.policy"
    systemProperty "es.path.home", "src/test/eshome"
    jvmArgs += " -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000"
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum file: it.archivePath, algorithm: 'sha1'
    }
}
// Set to false to not use elasticsearch checkstyle rules
checkstyleMain.enabled = true
checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
dependencyLicenses.enabled = true

// FIXME thirdparty audit needs to be enabled
thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
licenseHeaders.enabled = false
namingConventions.enabled = false
forbiddenApisMain.enabled = false
forbiddenApisTest.enabled = false
integTest.enabled = false
jarHell.enabled = false
