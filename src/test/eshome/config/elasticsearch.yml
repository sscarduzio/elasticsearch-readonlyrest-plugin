transport.type: local
http.type: ssl_netty4

cluster.name: elasticsearch
#http.bind_host: _eth0:ipv4_
#network.host: _eth0:ipv4_

readonlyrest:
    # (De)activate plugin
    enable: true

    ssl:
      enable: false
      keystore_file: "/me/elasticsearch-readonlyrest-plugin-5.x/src/test/eshome/plugins/readonlyrest/keystore.jks"
      keystore_pass: readonlyrest
      key_pass: readonlyrest

    # HTTP response body in case of forbidden request.
    # If this is null or omitted, the name of the first violated access control rule is returned (useful for debugging!)
    response_if_req_forbidden: <h1>Forbidden</h1>

    # Default policy is to forbid everything, so let's define a whitelist
    access_control_rules:

    - name: "::LOGSTASH::"
      auth_key: logstash:logstash
      type: allow
      actions: ["indices:data/read/*","indices:data/write/*","indices:admin/template/*","indices:admin/create"]
      indices: ["logstash-*"]

    - name: "::KIBANA-SRV::"
      auth_key: kibana:kibana
      type: allow

    - name: "::RO DEVELOPER::"
      auth_key: ro:dev
      type: allow
      kibana_access: ro
      indices: [ ".kibana", ".kibana-devnull", "logstash-*"]

    - name: "::RW DEVELOPER::"
      auth_key: rw:dev
      type: allow
      kibana_access: rw
      indices: [".kibana", ".kibana-devnull", "logstash-*"]

    - name: "::ADMIN::"
      auth_key: admin:dev
      type: allow
      kibana_access: admin
      indices: [ ".kibana", ".readonlyrest", ".kibana-devnull", "logstash-*"]

    - name: "::PUBLIC SEARCH::"
      type: allow
      indices: ["public"]
      actions: ["indices:data/read/*"]
