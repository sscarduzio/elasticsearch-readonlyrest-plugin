transport.type: local
http.type: ssl_netty4

cluster.name: elasticsearch
#http.bind_host: _eth0:ipv4_
#network.host: _eth0:ipv4_

readonlyrest:
    # (De)activate plugin
    enable: true

    ssl:
      enable: false
      keystore_file: "/me/elasticsearch-readonlyrest-plugin-5.x/src/test/eshome/plugins/readonlyrest/keystore.jks"
      keystore_pass: readonlyrest
      key_pass: readonlyrest

    # Default policy is to forbid everything, so let's define a whitelist
    access_control_rules:

    # ES container initializer need this rule to configure ES instance after startup
    - name: "CONTAINER ADMIN"
      type: allow
      auth_key: admin:container

    - name: "::Tweets::"
      type: allow
      methods: GET
      indices: ["twitter"]
      proxy_auth:
        proxy_auth_config: "proxy1"
        users: ["*"]
      groups_provider_authorization:
        user_groups_provider: "GroupsService1"
        groups: ["group1"]

    - name: "::Facebook posts::"
      type: allow
      methods: GET
      indices: ["facebook"]
      proxy_auth:
        proxy_auth_config: "proxy1"
        users: ["*"]
      groups_provider_authorization:
        user_groups_provider: "GroupsService2"
        groups: ["group3"]
        cache_ttl_in_sec: 60

    proxy_auth_configs:

    - name: "proxy1"
      user_id_header: "X-Auth-Token"

    user_groups_providers:

    - name: GroupsService1
      groups_endpoint: "http://localhost:8080/groups"
      auth_token_name: "user"
      auth_token_passed_as: QUERY_PARAM
      response_groups_json_path: "$..groups[?(@.name)].name"

    - name: GroupsService2
      groups_endpoint: "http://localhost:8080/groups"
      auth_token_name: "auth_token"
      auth_token_passed_as: HEADER
      response_groups_json_path: "$..groups[?(@.name)].name"

