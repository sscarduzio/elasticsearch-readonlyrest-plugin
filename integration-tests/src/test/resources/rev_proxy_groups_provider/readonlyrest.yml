readonlyrest:
  ssl:
    enable: true
    keystore_file: "keystore.jks"
    keystore_pass: readonlyrest
    key_pass: readonlyrest

  enable: true

  prompt_for_basic_auth: false

  # HTTP response body in case of forbidden request.
  # If this is null or omitted, the name of the first violated access control rule is returned (useful for debugging!)
  response_if_req_forbidden: <h1>Forbidden</h1>

  # Default policy is to forbid everything, so let's define a whitelist
  access_control_rules:

  # ES containter initializer need this rule to configure ES instance after startup
  - name: "CONTAINER ADMIN"
    type: allow
    auth_key: admin:container

  - name: "::Tweets::"
    type: allow
    methods: GET
    indices: ["twitter"]
    proxy_auth:
      proxy_auth_config: "proxy1"
      users: ["*"]
    groups_provider_authorization:
      user_groups_provider: "GroupsService1"
      groups: ["group1"]

  - name: "::Facebook posts::"
    type: allow
    methods: GET
    indices: ["facebook"]
    proxy_auth:
      proxy_auth_config: "proxy1"
      users: ["*"]
    groups_provider_authorization:
      user_groups_provider: "GroupsService2"
      groups: ["group3"]
      cache_ttl_in_sec: 60

  proxy_auth_configs:

  - name: "proxy1"
    user_id_header: "X-Auth-Token"

  user_groups_providers:

  - name: GroupsService1
    groups_endpoint: "http://{GROUPS1_HOST}:{GROUPS1_PORT}/groups"
    auth_token_name: "user"
    auth_token_passed_as: QUERY_PARAM
    response_groups_json_path: "$..groups[?(@.name)].name"

  - name: GroupsService2
    groups_endpoint: "http://{GROUPS2_HOST}:{GROUPS2_PORT}/groups"
    auth_token_name: "auth_token"
    auth_token_passed_as: HEADER
    response_groups_json_path: "$..groups[?(@.name)].name"
