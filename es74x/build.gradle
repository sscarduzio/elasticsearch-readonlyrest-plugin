/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */
import com.bmuschko.gradle.docker.tasks.image.*
import org.gradle.crypto.checksum.Checksum

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'org.gradle.crypto.checksum'
    id "readonlyrest.plugin-common-conventions"
}

def pluginFullName = pluginName + '-' + version
def projectJavaLanguageVersion = JavaLanguageVersion.of(8)
def moduleEsVersion = project.property('esVersion') != null ? project.property('esVersion') : project.property('latestSupportedEsVersion')
def dockerImageLatest = 'beshultd/elasticsearch-readonlyrest:' + moduleEsVersion + '-ror-latest'
def dockerImageVersion = 'beshultd/elasticsearch-readonlyrest:' + moduleEsVersion + '-ror-' + pluginVersion

java {
    toolchain {
        languageVersion = projectJavaLanguageVersion
    }
}

dependencies {
    implementation  project(path: ':core')
    implementation  project(path: ':ror-tools', configuration: 'shadow')
    implementation  project(path: ':ror-tools-core')
    implementation  group: 'org.elasticsearch',                 name: 'elasticsearch' ,                         version: moduleEsVersion
    implementation  group: 'org.elasticsearch.client',          name: 'elasticsearch-rest-high-level-client',   version: moduleEsVersion
    implementation  group: 'org.apache.httpcomponents',         name: 'httpclient',                             version: '4.5.13'
    compileOnly     group: 'org.codelibs.elasticsearch.lib',    name: 'plugin-classloader',                     version: moduleEsVersion
    compileOnly     group: 'org.locationtech.spatial4j',        name: 'spatial4j',                              version: '0.7'
    implementation  group: 'org.elasticsearch.plugin',          name: 'transport-netty4-client',                version: moduleEsVersion
}

configurations {
    wagon
    distJars {
        exclude group: 'org.elasticsearch'
        exclude group: 'lucene-core'
        exclude module: 'log4j-api'
        exclude module: 'log4j-core'
        exclude group: 'lucene-analyzers-common'
        exclude group: 'org.apache.commons'
        exclude group: 'org.yaml'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    }
}

tasks.withType(ScalaCompile).configureEach {
    scalaCompileOptions.additionalParameters = [
            // The "-Wunused:nowarn" flag is unused for now, see plugin-common-conventions.gradle for details
            //"-Wunused:-nowarn" // depending on es version, some methods are deprecated or not
    ]
}

tasks.register('cleanOldData') {
    doLast {
        delete 'build/tmp/' + pluginFullName
    }
}

tasks.register('jarHellCheck', JavaExec) {
    outputs.upToDateWhen { false }
    mainClass.set("org.elasticsearch.bootstrap.JarHell")
    classpath = project.sourceSets.main.compileClasspath.filter { it.exists() }
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = projectJavaLanguageVersion
    }
}

tasks.register('resolvePluginDescriptorTemplate', Copy) {
    outputs.upToDateWhen { false }
    from './plugin-metadata'
    into 'build/tmp/' + pluginFullName
    expand([
            'descriptor': [
                    'name'         : pluginName,
                    'pluginVersion': pluginVersion,
                    'esVersion'    : moduleEsVersion
            ]
    ])
}

tasks.register('buildRorPluginZip') {
    dependsOn(packageRorPlugin, createRorPluginChecksums)
}

tasks.register('packageRorPlugin', Zip) {
    dependsOn(cleanOldData, jarHellCheck, toJar, resolvePluginDescriptorTemplate)
    outputs.upToDateWhen { false }
    archivesBaseName = pluginName
    into('.') {
        from configurations.distJars.filter { x -> !x.name.contains('spatial4j') && !x.name.contains('jts') }
        from 'build/libs/' + pluginFullName + '.jar'
        from 'build/tmp/' + pluginFullName
    }
}

tasks.register('createRorPluginChecksums', Checksum) {
    dependsOn(packageRorPlugin)
    def distributionsDir = layout.buildDirectory.dir("distributions")

    outputs.upToDateWhen { false }
    inputFiles.setFrom(packageRorPlugin.archiveFile)
    outputDirectory.set(distributionsDir)
    checksumAlgorithm.set(Checksum.Algorithm.SHA512)
}

tasks.register('uploadRorPluginToS3', Exec) {
    dependsOn(packageRorPlugin, createRorPluginChecksums)

    def distributionsDir = layout.buildDirectory.get().asFile.path + "/distributions"
    def pluginFileZip = distributionsDir + "/" + pluginFullName + ".zip"
    def pluginSha1 = distributionsDir + "/" + pluginFullName + ".zip.sha1"
    def pluginSha512 = distributionsDir + "/" + pluginFullName + ".zip.sha512"
    def targetS3Dir = "build/" + pluginVersion + "/"

    commandLine '../ci/upload-files-to-s3.sh', pluginFileZip, pluginSha512, pluginSha1, targetS3Dir
}

tasks.register('prepareDockerImageFiles', Copy) {
    dependsOn packageRorPlugin
    outputs.upToDateWhen { false }

    from layout.projectDirectory.file("Dockerfile")
    from layout.buildDirectory.file("distributions/" + pluginFullName + ".zip")
    from rootProject.files("docker-image")

    into layout.buildDirectory.dir("docker-image")
}

tasks.register('buildRorDockerImage', DockerBuildImage) {
    dependsOn('packageRorPlugin', 'prepareDockerImageFiles')

    inputDir = layout.buildDirectory.dir("docker-image")
    buildArgs = [
            ES_VERSION: project.properties['esVersion'],
            ROR_VERSION: pluginVersion
    ]
    images.add(dockerImageLatest)
    images.add(dockerImageVersion)
}

tasks.register('removeRorDockerImage', DockerRemoveImage) {
    dependsOn buildRorDockerImage
    force = true
    targetImageId buildRorDockerImage.getImageId()
}

tasks.register('pushRorDockerImage', DockerPushImage) {
    dependsOn buildRorDockerImage

    images.add(dockerImageLatest)
    images.add(dockerImageVersion)
}
pushRorDockerImage.configure { finalizedBy removeRorDockerImage }