/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

plugins {
    id 'com.bmuschko.docker-remote-api'
    id "readonlyrest.base-common-conventions"
}

project.ext {
    pluginName = rootProject.properties['pluginName']
    publishedPluginVersion = rootProject.properties['pluginVersion']
    pluginVersion = rootProject.properties['pluginVersion']
    esVersion = project.hasProperty('esVersion') ? project.property('esVersion') : project.property('latestSupportedEsVersion')
    s3BucketName = System.env.BUCKET ?: "readonlyrest-data"
}

group = 'org.elasticsearch.plugin'
version = pluginVersion + '_es' + project.ext.esVersion

repositories {
    maven {
        url = "s3://" + project.s3BucketName + "/build"
        authentication {
            awsIm(AwsImAuthentication)
        }
        metadataSources {
            artifact()
        }
    }
}

configurations {
    distJars {
        extendsFrom runtimeClasspath
    }
}

dependencyCheck {
    /*
       Severity	Base Score
       None     0
       Low      0.1-3.9
       Medium   4.0-6.9
       High     7.0-8.9
       Critical 9.0-10.0
     */
    failBuildOnCVSS = 3
    scanConfigurations = ['distJars']
    suppressionFiles = ["${project.rootDir}/supressions_cve.xml"]
}

docker {
    registryCredentials {
        username = System.getenv('DOCKER_REGISTRY_USER')
        password = System.getenv('DOCKER_REGISTRY_PASSWORD')
    }
}

tasks.withType(ScalaCompile).configureEach {
    scalaCompileOptions.additionalParameters = [
            "-unchecked",
            "-Ywarn-macros:after",
            "-feature",
            "-Ymacro-annotations",
            "-Xfatal-warnings",
            "-Ywarn-unused",
            "-Wunused:nowarn"
    ]
}

tasks.withType(Zip).configureEach { task ->
    task.doLast {
        ant.checksum file: it.archivePath, algorithm: 'sha1'
    }
}

tasks.register('generateVersionsFile') {
    outputs.upToDateWhen { false }
    doFirst {
        def resourcesDir = sourceSets.main.output.resourcesDir

        resourcesDir.mkdirs()
        def contents = "es_version=$project.ext.esVersion\nplugin_version=$pluginVersion"
        new File(resourcesDir, "ror-build-info.properties").text = contents
    }
}

tasks.register('toJar', Jar) {
    dependsOn generateVersionsFile
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.getOutput()
}
