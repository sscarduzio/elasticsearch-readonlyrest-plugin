/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

buildscript {
    ext {
        pluginVersion = rootProject.properties['pluginVersion']
        esVersion = project.properties['esVersion']
        esModule = project.properties['esModule']
        repoPath = rootDir.absolutePath.toString()
        s3BucketName = System.env.BUCKET ?: "readonlyrest-data"
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = "s3://" + s3BucketName + "/build"
        authentication {
            awsIm(AwsImAuthentication)
        }
    }
}

group = 'org.elasticsearch.plugin'
version = pluginVersion + '_es' + esVersion

apply plugin: 'java'

configurations {
    runtime
    netty
}

dependencies {
    runtime('org.elasticsearch:elasticsearch:' + esVersion)
    runtime group: 'org.apache.logging.log4j',          name: 'log4j-core',                         version: '2.15.0'
    runtime group: 'org.elasticsearch',                 name: 'elasticsearch-plugin-classloader',   version: esVersion
    netty   group: 'org.elasticsearch.plugin',          name: 'transport-netty4',                   version: esVersion
}

task buildRor(type: GradleBuild) {
    startParameter.projectProperties = ['esVersion':esVersion]
    tasks = [':' + esModule + ':ror']
}

task downloadEsBinaries(type: GradleBuild) {
    startParameter.projectProperties = ['esVersion':esVersion]
    tasks = [':ror-tools:downloadEsBinaries']
}

task copyRorJars(type: Copy, dependsOn: [buildRor]) {
    def zipFile = file("../" + esModule + "/build/distributions/readonlyrest-" + pluginVersion + "_es"+ esVersion + ".zip")

    from zipTree(zipFile)
    into "$buildDir/plugins/readonlyrest"
}

task copyTransportNetty4Module(type: Copy, dependsOn: [downloadEsBinaries]) {
    def moduleDir = file("../ror-tools/build/es-" + esVersion + "/elasticsearch-" + esVersion + "/modules/transport-netty4")

    from moduleDir
    into "$buildDir/modules/transport-netty4"
}

task copyAnsiConsoleTools(type: Copy, dependsOn: [downloadEsBinaries]) {
    def toolsDir = file("../ror-tools/build/es-" + esVersion + "/elasticsearch-" + esVersion + "/lib/tools/ansi-console")

    from toolsDir
    into "$buildDir/lib/tools/ansi-console"
}

task copyNettyJar(type: Copy) {
    from configurations.netty
    into "$buildDir/plugins/readonlyrest"
}

task copyConfigFiles(type: Copy) {
    from('.'){
        include 'config/**', 'lib/**', 'config/**', 'modules/**', 'plugins/**'
    }
    from "sec-all.policy"
    into "$buildDir"
}

task runEs(type: JavaExec, dependsOn: [clean, copyConfigFiles, copyRorJars, copyNettyJar, copyTransportNetty4Module, copyAnsiConsoleTools]) {
    workingDir = buildDir
    classpath = configurations.runtime
    systemProperties = ["java.awt.headless"                     : "true",
                        "es.insecure.allow.root"                : "true",
                        "file.encoding"                         : "UTF-8",
                        "jna.nosys"                             : "true",
                        "es.path.home"                          : "$buildDir",
                        "log4j2.disable.jmx"                    : "true",
                        "jdk.io.permissionsUseCanonicalPath"    : "true",
                        "io.netty.noUnsafe"                     : "true",
                        "io.netty.noKeySetOptimization"         : "true",
                        "io.netty.recycler.maxCapacityPerThread": "0",
                        "log4j.shutdownHookEnabled"             : "false",
                        "log4j.skipJansi"                       : "true",
                        "es.path.conf"                          : "$buildDir/config/",
                        "java.security.manager"                 : "allow",
                        "java.security.policy"                  : "$buildDir/sec-all.policy",
    ]
    main = "org.elasticsearch.bootstrap.Elasticsearch"
}

clean {
    delete fileTree("plugins")
    delete fileTree("modules")
    delete fileTree("libs")
}