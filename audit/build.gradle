/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

plugins {
    id "readonlyrest.base-common-conventions"

    id "de.marcphilipp.nexus-publish"           version "0.4.0"
    id "io.codearte.nexus-staging"              version "0.22.0"
    id "com.github.prokod.gradle-crossbuild"    version "0.14.1"
    id "java"
    id "java-library"
    id "signing"
}

group = 'org.elasticsearch.plugin'
version = pluginVersion

dependencyCheck {
    /*
       Severity	Base Score
       None     0
       Low      0.1-3.9
       Medium   4.0-6.9
       High     7.0-8.9
       Critical 9.0-10.0
     */
    failBuildOnCVSS = 3
    scanConfigurations = ['runtimeClasspath']
    suppressionFiles = ["${project.rootDir}/supressions_cve.xml"]
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileScala {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

crossBuild {
    scalaVersionsCatalog = [
            '2.11': '2.11.12',
            '2.12': '2.12.17',
            '2.13': '2.13.11'
    ]

    builds {
        v211
        v212
        v213
    }
}

dependencies {
    implementation                 group: 'org.json',           name: 'json',                version: '20231013'
    crossBuildV211Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.11.12'
    crossBuildV212Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.12.17'
    crossBuildV213Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.13.11'
    compileOnly                    group: 'org.scala-lang',     name: 'scala-library',       version: '2.13.11'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events "standardOut", "started", "passed", "skipped", "failed"
    }
}

compileScala {
    options.compilerArgs.addAll(
            "-unchecked",
            "-Ywarn-macros:after",
            "-feature",
            "-Ymacro-annotations",
            "-Xfatal-warnings",
    )
}

def ror_pom = { ->
    name.set("ReadonlyREST audit library")
    description.set("A library to writing custom audit log serializer for Elasticsearch ReadonlyREST plugin")
    url.set("http://www.example.com/library")
    licenses {
        license {
            name.set("GNU GENERAL PUBLIC LICENSE, Version 3")
            url.set("https://www.gnu.org/licenses/gpl-3.0.txt")
        }
    }
    scm {
        connection.set("scm:git:git@github.com:sscarduzio/elasticsearch-readonlyrest-plugin.git")
        url.set("https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin/")
    }
    developers {
        developer {
            id.set('scarduzio')
            name.set('Simone Scarduzio')
            email.set('simone@readonlyrest.com')
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = rootProject.file('.travis/secret.pgp') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

group = 'tech.beshu.ror'
archivesBaseName = 'audit'
publishing {
    publications {
        crossBuildV211(MavenPublication) {
            artifact crossBuildV211Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
        crossBuildV212(MavenPublication) {
            artifact crossBuildV212Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
        crossBuildV213(MavenPublication) {
            artifact crossBuildV213Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
    }
    repositories {
        maven {
            name 'deploy'
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('MAVEN_REPO_USER')
                password = System.getenv('MAVEN_REPO_PASSWORD')
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusPublishing {
    repositories {
        sonatype {
            packageGroup = 'tech.beshu'
            stagingProfileId = System.getenv('MAVEN_STAGING_PROFILE_ID')
            username = System.getenv('MAVEN_REPO_USER')
            password = System.getenv('MAVEN_REPO_PASSWORD')
        }
    }
    clientTimeout = java.time.Duration.ofSeconds(120)
}

nexusStaging {
    packageGroup = 'tech.beshu'
    stagingProfileId = System.getenv('MAVEN_STAGING_PROFILE_ID')
    username = System.getenv('MAVEN_REPO_USER')
    password = System.getenv('MAVEN_REPO_PASSWORD')
    numberOfRetries = 50
    delayBetweenRetriesInMillis = 10000
}
