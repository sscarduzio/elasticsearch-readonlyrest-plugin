/*
 *    This file is part of ReadonlyREST.
 *
 *    ReadonlyREST is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    ReadonlyREST is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with ReadonlyREST.  If not, see http://www.gnu.org/licenses/
 */

plugins {
    id "readonlyrest.base-common-conventions"

    id "com.github.prokod.gradle-crossbuild" version "0.16.0"
    id "java"
    id "java-library"
    id "maven-publish"
    id "signing"
}

dependencyCheck {
    /*
       Severity	Base Score
       None     0
       Low      0.1-3.9
       Medium   4.0-6.9
       High     7.0-8.9
       Critical 9.0-10.0
     */
    failBuildOnCVSS = 3
    scanConfigurations = ['runtimeClasspath']
    suppressionFiles = ["${project.rootDir}/supressions_cve.xml"]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

crossBuild {
    scalaVersionsCatalog = [
            '2.11': '2.11.12',
            '2.12': '2.12.19',
            '2.13': '2.13.13',
            '3.3.0': '3.3.3'
    ]

    builds {
        v211
        v212
        v213
        v3
    }
}

dependencies {
    implementation                 group: 'org.json',           name: 'json',                version: '20231013'
    crossBuildV211Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.11.12'
    crossBuildV212Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.12.19'
    crossBuildV213Implementation   group: 'org.scala-lang',     name: 'scala-library',       version: '2.13.13'
    crossBuildV3Implementation     group: 'org.scala-lang',     name: 'scala3-library_3',    version: '3.3.3'
    compileOnly                    group: 'org.scala-lang',     name: 'scala3-library_3',    version: '3.3.3'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events "standardOut", "started", "passed", "skipped", "failed"
    }
}

compileScala {
    options.compilerArgs.addAll(
            "-feature",
            "-Xfatal-warnings",
            "-Wunused:implicits",
            "-Wunused:imports",
            "-Wunused:explicits",
            "-Wunused:strict-no-implicit-warn",
            "-Wunused:locals",
            "-Wunused:params",
            "-Wunused:privates",
            "-Wunused:nowarn",
    )
}

def ror_pom = { ->
    name.set("ReadonlyREST audit library")
    description.set("A library to writing custom audit log serializer for Elasticsearch ReadonlyREST plugin")
    url.set("http://www.example.com/library")
    licenses {
        license {
            name.set("GNU GENERAL PUBLIC LICENSE, Version 3")
            url.set("https://www.gnu.org/licenses/gpl-3.0.txt")
        }
    }
    scm {
        connection.set("scm:git:git@github.com:sscarduzio/elasticsearch-readonlyrest-plugin.git")
        url.set("https://github.com/sscarduzio/elasticsearch-readonlyrest-plugin/")
    }
    developers {
        developer {
            id.set('scarduzio')
            name.set('Simone Scarduzio')
            email.set('simone@readonlyrest.com')
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = rootProject.file('.travis/secret.pgp') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

group = 'tech.beshu.ror'
version = pluginVersion

publishing {
    publications {
        crossBuildV211(MavenPublication) {
            artifact crossBuildV211Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
        crossBuildV212(MavenPublication) {
            artifact crossBuildV212Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
        crossBuildV213(MavenPublication) {
            artifact crossBuildV213Jar
            artifact sourcesJar
            artifact javadocJar
            pom ror_pom
        }
    }
}

signing {
    sign(publishing.publications)
}

// Fix Gradle warning about signing tasks using publishing task outputs without explicit dependencies
// https://github.com/gradle/gradle/issues/26091
tasks.withType(AbstractPublishToMaven.class).configureEach {
    def signingTasks = tasks.withType(Sign.class)
    mustRunAfter(signingTasks)
}

jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
